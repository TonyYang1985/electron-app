name: 构建和发布

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.12)'
        required: true
        default: '1.0.12'

permissions:
  contents: write

jobs:
  # 构建阶段 - 完全禁用自动发布
  build:
    name: 构建 ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            platform: win
          - os: macos-latest
            name: macOS
            platform: mac
          - os: ubuntu-latest
            name: Linux
            platform: linux
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 关键: 不设置标签信息，避免electron-builder检测到标签
          ref: ${{ github.sha }}
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      # 禁用Git标签信息
      - name: 移除Git标签信息
        shell: bash
        run: |
          # 移除所有标签，防止electron-builder检测到
          git tag -d $(git tag -l) 2>/dev/null || true
          echo "Git标签已清理，electron-builder不会自动发布"
      
      # Windows构建 - 仅构建
      - name: Windows构建
        if: matrix.platform == 'win'
        shell: cmd
        run: |
          set CSC_IDENTITY_AUTO_DISCOVERY=false
          set ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES=true
          npm run build:win
        env:
          # 不设置GH_TOKEN，确保不会尝试发布
          CSC_IDENTITY_AUTO_DISCOVERY: false
      
      # macOS构建 - 仅构建
      - name: macOS构建
        if: matrix.platform == 'mac'
        run: npm run build:mac
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
      
      # Linux构建 - 仅构建
      - name: Linux构建
        if: matrix.platform == 'linux'
        run: npm run build:linux
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
      
      # 验证构建结果
      - name: 验证构建结果
        shell: bash
        run: |
          echo "=== ${{ matrix.name }} 构建完成 ==="
          if [ -d "dist" ]; then
            echo "构建文件列表:"
            find dist/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.yml" -o -name "*.blockmap" \) -exec ls -lh {} \;
            echo "✅ 构建成功"
          else
            echo "❌ 构建失败，dist目录不存在"
            exit 1
          fi
      
      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-v${{ github.run_number }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.deb
            dist/*.rpm
            dist/*.AppImage
            dist/*.yml
            dist/*.blockmap
          retention-days: 7
          compression-level: 6
          if-no-files-found: warn

  # 发布阶段
  release:
    name: 创建GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.result == 'success'
    timeout-minutes: 30
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 获取版本信息
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version || '1.0.12' }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "发布版本: $VERSION"
      
      # 下载所有构建产物
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      # 整理发布文件
      - name: 整理发布文件
        run: |
          mkdir -p release-files
          
          echo "=== 下载的构建产物 ==="
          find artifacts/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.yml" -o -name "*.blockmap" \) -ls
          
          # 复制所有文件到release目录
          find artifacts/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.yml" -o -name "*.blockmap" \) -exec cp {} release-files/ \;
          
          echo ""
          echo "=== 准备发布的文件 ==="
          ls -lah release-files/
          
          # 统计文件
          file_count=$(ls -1 release-files/ | wc -l)
          total_size=$(du -sh release-files/ | cut -f1)
          
          echo ""
          echo "📊 发布统计:"
          echo "  文件数量: $file_count"
          echo "  总大小: $total_size"
          
          if [ $file_count -eq 0 ]; then
            echo "❌ 没有找到可发布的文件"
            exit 1
          fi
      
      # 生成Release说明
      - name: 生成Release说明
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 My Awesome App v${{ steps.version.outputs.version }}
          
          ### 📦 平台支持
          
          **🪟 Windows**
          - 支持 Windows 10/11 (x64)
          - 提供NSIS安装程序和便携版本
          
          **🍎 macOS**
          - 支持 Intel 和 Apple Silicon
          - macOS 10.12+ 系统要求
          
          **🐧 Linux**
          - AppImage 通用版本
          - Debian/Ubuntu (.deb)
          - CentOS/Fedora (.rpm)
          
          ### 📝 安装指南
          
          **Windows:**
          1. 下载 `.exe` 文件
          2. 双击运行安装程序
          3. 如提示安全警告，点击"更多信息" → "仍要运行"
          
          **macOS:**
          1. 下载对应芯片的 `.dmg` 文件
          2. 双击挂载，拖拽到 Applications 文件夹
          3. 首次运行可能需要右键"打开"
          
          **Linux:**
          1. 下载 `.AppImage` 文件
          2. 添加执行权限: `chmod +x *.AppImage`
          3. 双击或命令行运行
          
          ### 🔄 自动更新
          应用内置自动更新功能，会自动检测和安装新版本。
          
          ### 🛠️ 技术信息
          - **Electron**: 28.3.3
          - **Node.js**: 18.x
          - **构建时间**: $(date)
          
          ---
          
          **🔗 相关链接**
          - [源代码](https://github.com/${{ github.repository }})
          - [问题反馈](https://github.com/${{ github.repository }}/issues)
          - [更新日志](https://github.com/${{ github.repository }}/releases)
          EOF
      
      # 创建Release
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "🎉 My Awesome App v${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: release-files/*
          make_latest: true
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 验证Release
      - name: 验证Release创建
        run: |
          echo "等待Release完全创建..."
          sleep 10
          
          echo "=== 验证Release ==="
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.tag }}")
          
          if echo "$response" | jq -e '.tag_name' > /dev/null; then
            echo "✅ Release创建成功"
            
            release_url=$(echo "$response" | jq -r '.html_url')
            assets_count=$(echo "$response" | jq '.assets | length')
            
            echo "🔗 Release URL: $release_url"
            echo "📦 文件数量: $assets_count"
            
            if [ $assets_count -gt 0 ]; then
              echo ""
              echo "📋 文件列表:"
              echo "$response" | jq -r '.assets[] | "  ✓ \(.name) (\((.size / 1024 / 1024 * 100 | floor) / 100)MB)"'
            fi
          else
            echo "❌ Release验证失败"
            echo "$response" | jq '.'
            exit 1
          fi
      
      # 成功通知
      - name: 发布成功通知
        run: |
          echo ""
          echo "🎉🎉🎉 发布成功完成! 🎉🎉🎉"
          echo ""
          echo "📊 发布信息:"
          echo "  应用名称: My Awesome App"
          echo "  版本号: ${{ steps.version.outputs.version }}"
          echo "  发布标签: ${{ steps.version.outputs.tag }}"
          echo ""
          echo "🔗 下载地址:"
          echo "  https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
          echo ""
          echo "✨ 用户现在可以下载并安装应用了!"
          echo "🔄 应用支持自动更新，安装后会自动检测新版本。"

  # 清理工件
  cleanup:
    name: 清理临时文件
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 清理构建工件
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            Windows-v${{ github.run_number }}
            macOS-v${{ github.run_number }}
            Linux-v${{ github.run_number }}
        continue-on-error: true
      
      - name: 清理完成
        run: echo "🧹 临时文件清理完成"