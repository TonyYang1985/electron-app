name: 构建和发布

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.5)'
        required: true
        default: '1.0.5'

# 修正权限配置 - 移除无效权限
permissions:
  contents: write
  actions: read
  packages: write
  pull-requests: read
  security-events: read
  statuses: read

jobs:
  # 构建阶段
  build:
    name: 构建 ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            platform: win
          - os: macos-latest
            name: macOS
            platform: mac
          - os: ubuntu-latest
            name: Linux
            platform: linux
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      # 修正Token验证
      - name: 验证GitHub Token
        shell: bash
        run: |
          if [ -n "$GH_TOKEN" ]; then
            echo "✅ GH_TOKEN 已设置"
            echo "Token前缀: ${GH_TOKEN:0:10}..."
          else
            echo "❌ GH_TOKEN 未设置"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
      # Windows构建并发布
      - name: Windows构建并发布
        if: matrix.platform == 'win'
        shell: cmd
        run: |
          set CSC_IDENTITY_AUTO_DISCOVERY=false
          npm run publish:win
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
      # macOS构建并发布
      - name: macOS构建并发布
        if: matrix.platform == 'mac'
        run: npm run publish:mac
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
      # Linux构建并发布
      - name: Linux构建并发布
        if: matrix.platform == 'linux'
        run: npm run publish:linux
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
      # 验证构建结果
      - name: 验证构建结果
        shell: bash
        run: |
          echo "=== 构建完成 ==="
          if [ -d "dist" ]; then
            ls -la dist/
            echo "✅ 构建成功"
          else
            echo "❌ 构建失败，dist目录不存在"
            exit 1
          fi
      
      # 上传构建产物作为备份
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.name }}-build-${{ github.run_number }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.deb
            dist/*.rpm
            dist/*.AppImage
            dist/*.yml
            dist/*.blockmap
          retention-days: 30
          if-no-files-found: warn

  # 发布验证阶段
  verify-release:
    name: 验证发布结果
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.result == 'success'
    timeout-minutes: 15
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 获取版本信息
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version || '1.0.5' }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "发布版本: $VERSION"
      
      # 验证Release是否创建成功
      - name: 验证Release状态
        run: |
          echo "=== 验证Release创建状态 ==="
          
          # 等待Release完全创建
          sleep 30
          
          # 检查Release是否存在
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.tag }}")
          
          if echo "$response" | jq -e '.tag_name' > /dev/null; then
            echo "✅ Release创建成功"
            release_name=$(echo "$response" | jq -r '.name')
            release_url=$(echo "$response" | jq -r '.html_url')
            
            echo "Release名称: $release_name"
            echo "Release URL: $release_url"
            
            # 检查assets数量
            assets_count=$(echo "$response" | jq '.assets | length')
            echo "包含文件数量: $assets_count"
            
            if [ "$assets_count" -gt 0 ]; then
              echo ""
              echo "📦 Release文件列表:"
              echo "$response" | jq -r '.assets[] | "  - \(.name) (\((.size / 1024 / 1024 * 100 | floor) / 100)MB)"'
            else
              echo "⚠️ Release创建成功但没有文件"
            fi
            
            # 检查自动更新配置文件
            echo ""
            echo "🔍 检查自动更新配置:"
            if echo "$response" | jq -e '.assets[] | select(.name | test("latest.*\\.yml"))' > /dev/null; then
              echo "✅ 找到自动更新配置文件"
            else
              echo "⚠️ 未找到自动更新配置文件"
            fi
            
          else
            echo "❌ Release创建失败或未找到"
            echo "API响应: $response"
            exit 1
          fi
      
      # 发布成功通知
      - name: 发布成功通知
        run: |
          echo ""
          echo "🎉 构建和发布流程完成!"
          echo ""
          echo "📊 发布信息:"
          echo "  版本: ${{ steps.version.outputs.version }}"
          echo "  标签: ${{ steps.version.outputs.tag }}"
          echo ""
          echo "🔗 相关链接:"
          echo "  Release页面: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
          echo "  Actions页面: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          echo "📱 用户现在可以从Release页面下载对应平台的安装包!"
          echo ""
          echo "🔄 自动更新功能已配置，用户安装后会自动检测新版本。"

  # 清理工件
  cleanup:
    name: 清理构建工件
    needs: [build, verify-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 清理构建工件
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            Windows-build-${{ github.run_number }}
            macOS-build-${{ github.run_number }}
            Linux-build-${{ github.run_number }}
        continue-on-error: true
      
      - name: 清理完成
        run: echo "🧹 构建工件清理完成"