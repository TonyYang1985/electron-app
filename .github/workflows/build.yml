name: 构建和发布

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.11)'
        required: true
        default: '1.0.11'

# 修正权限设置
permissions:
  contents: write
  actions: read
  packages: write
  pull-requests: read
  security-events: read
  statuses: read

jobs:
  # 构建阶段
  build:
    name: 构建 ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            platform: win
          - os: macos-latest
            name: macOS
            platform: mac
          - os: ubuntu-latest
            name: Linux
            platform: linux
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      # 修正Token验证
      - name: 验证GitHub Token
        shell: bash
        run: |
          if [ -n "$GH_TOKEN" ]; then
            echo "✅ GH_TOKEN 已设置"
            echo "Token前缀: ${GH_TOKEN:0:10}..."
          else
            echo "❌ GH_TOKEN 未设置"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Windows构建
      - name: Windows构建
        if: matrix.platform == 'win'
        shell: cmd
        run: |
          set CSC_IDENTITY_AUTO_DISCOVERY=false
          npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # macOS构建
      - name: macOS构建
        if: matrix.platform == 'mac'
        run: npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Linux构建
      - name: Linux构建
        if: matrix.platform == 'linux'
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 验证构建结果
      - name: 验证构建结果
        shell: bash
        run: |
          echo "=== 构建完成 ==="
          if [ -d "dist" ]; then
            ls -la dist/
            echo "✅ 构建成功"
          else
            echo "❌ 构建失败，dist目录不存在"
            exit 1
          fi
      
      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-build-${{ github.run_number }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.deb
            dist/*.rpm
            dist/*.AppImage
            dist/*.yml
            dist/*.blockmap
          retention-days: 30
          if-no-files-found: warn

  # 发布阶段
  release:
    name: 发布到GitHub Releases
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.result == 'success'
    timeout-minutes: 30
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # 验证发布权限
      - name: 验证发布权限
        run: |
          echo "验证GitHub API访问权限..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}" \
               | jq '.permissions // "No permissions found"'
      
      - name: 获取版本信息
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version || '1.0.11' }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "发布版本: $VERSION"
      
      # 下载构建产物
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      # 整理发布文件
      - name: 整理发布文件
        run: |
          mkdir -p release-files
          
          # 查看下载的文件
          echo "=== 下载的工件 ==="
          find artifacts/ -type f -ls
          
          # 复制所有构建文件
          find artifacts/ -type f \( \
            -name "*.exe" -o \
            -name "*.dmg" -o \
            -name "*.zip" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.AppImage" -o \
            -name "*.yml" -o \
            -name "*.blockmap" \
          \) -exec cp {} release-files/ \;
          
          echo "=== 准备发布的文件 ==="
          ls -la release-files/
          
          # 检查是否有文件
          if [ $(ls -1 release-files/ | wc -l) -eq 0 ]; then
            echo "❌ 没有找到发布文件"
            exit 1
          fi
          
          echo "✅ 找到 $(ls -1 release-files/ | wc -l) 个发布文件"
      
      # 生成发布说明
      - name: 生成发布说明
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 My Awesome App v${{ steps.version.outputs.version }}
          
          ### 📦 快速下载
          
          **🪟 Windows:** 
          - 安装程序版本 (推荐)
          
          **🍎 macOS:**
          - Intel Mac 和 Apple Silicon 都有对应版本
          
          **🐧 Linux:**
          - AppImage (通用)、deb (Ubuntu)、rpm (CentOS) 版本
          
          ### 🔄 自动更新
          应用支持自动更新，安装后会自动检测新版本。
          
          ### 📝 安装说明
          - **Windows**: 下载exe文件，双击安装
          - **macOS**: 下载dmg文件，拖拽到Applications文件夹
          - **Linux**: 下载AppImage文件，添加执行权限后运行
          
          ---
          **构建信息:** Electron 28.3.3 | Node.js 18.x
          EOF
      
      # 创建Release
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "🎉 My Awesome App v${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: release-files/*
          make_latest: true
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 发布成功通知
      - name: 发布成功通知
        run: |
          echo "🎉 发布成功!"
          echo "版本: ${{ steps.version.outputs.version }}"
          echo "下载地址: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"

  # 清理工件
  cleanup:
    name: 清理构建工件
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 清理构建工件
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            Windows-build-${{ github.run_number }}
            macOS-build-${{ github.run_number }}
            Linux-build-${{ github.run_number }}
        continue-on-error: true