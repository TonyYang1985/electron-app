name: 构建和发布

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.15)'
        required: true
        default: '1.0.15'

permissions:
  contents: write

jobs:
  # 构建阶段 - 完全禁用自动发布
  build:
    name: 构建 ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            platform: win
          - os: macos-latest
            name: macOS
            platform: mac
          - os: ubuntu-latest
            name: Linux
            platform: linux
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 使用特定SHA避免标签信息
          ref: ${{ github.sha }}
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      # 编译 TypeScript 代码
      - name: 编译和准备文件
        run: npm run build
        
      # 验证编译结果
      - name: 验证编译结果
        shell: bash
        run: |
          echo "=== TypeScript 编译验证 ==="
          if [ -f "release/main.js" ]; then
            echo "✅ main.js 编译成功"
            ls -la release/
          else
            echo "❌ TypeScript 编译失败: main.js 不存在"
            exit 1
          fi
          
          if [ -f "release/index.html" ]; then
            echo "✅ index.html 复制成功"
          else
            echo "❌ 资源复制失败: index.html 不存在"
            exit 1
          fi
      
      # 彻底清理Git环境防止electron-builder检测标签
      - name: 清理Git标签环境
        shell: bash
        run: |
          echo "清理Git环境以防止electron-builder自动发布..."
          
          # 移除所有远程引用
          git remote remove origin || true
          
          # 删除所有标签
          git tag -l | xargs -r git tag -d
          
          # 重新初始化为普通仓库
          rm -rf .git/refs/remotes
          rm -rf .git/refs/tags
          
          # 验证清理结果
          echo "当前Git状态:"
          git status || echo "Git状态检查完成"
          git tag -l || echo "无标签"
          
          echo "✅ Git环境已清理，electron-builder不会检测到发布条件"
      
      # 构建
      - name: 构建 ${{ matrix.name }}
        run: npm run build:${{ matrix.platform }}
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 验证构建结果
      - name: 验证构建结果
        shell: bash
        run: |
          echo "=== ${{ matrix.name }} 构建验证 ==="
          if [ -d "dist" ]; then
            echo "📁 构建文件:"
            find dist/ -type f \( \
              -name "*.exe" -o \
              -name "*.dmg" -o \
              -name "*.zip" -o \
              -name "*.deb" -o \
              -name "*.rpm" -o \
              -name "*.AppImage" -o \
              -name "*.yml" -o \
              -name "*.blockmap" \
            \) -exec ls -lh {} \;
            
            file_count=$(find dist/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" \) | wc -l)
            echo ""
            echo "📊 构建统计: 找到 $file_count 个主要文件"
            
            if [ $file_count -gt 0 ]; then
              echo "✅ ${{ matrix.name }} 构建成功"
            else
              echo "❌ ${{ matrix.name }} 构建失败: 未找到预期文件"
              exit 1
            fi
          else
            echo "❌ ${{ matrix.name }} 构建失败: dist目录不存在"
            exit 1
          fi
      
      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-v${{ github.run_number }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.deb
            dist/*.rpm
            dist/*.AppImage
            dist/*.yml
            dist/*.blockmap
          retention-days: 7
          compression-level: 6
          if-no-files-found: warn

  # 发布阶段
  release:
    name: 创建GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.result == 'success'
    timeout-minutes: 30
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 获取版本信息
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version || '1.0.15' }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📋 发布版本: $VERSION"
      
      # 下载所有构建产物
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      # 整理发布文件
      - name: 整理发布文件
        run: |
          mkdir -p release-files
          
          echo "=== 检查下载的构建产物 ==="
          find artifacts/ -type f \( \
            -name "*.exe" -o \
            -name "*.dmg" -o \
            -name "*.zip" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.AppImage" -o \
            -name "*.yml" -o \
            -name "*.blockmap" \
          \) -exec ls -lh {} \;
          
          # 复制所有文件到release目录
          find artifacts/ -type f \( \
            -name "*.exe" -o \
            -name "*.dmg" -o \
            -name "*.zip" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.AppImage" -o \
            -name "*.yml" -o \
            -name "*.blockmap" \
          \) -exec cp {} release-files/ \;
          
          echo ""
          echo "=== 准备发布的文件 ==="
          ls -lah release-files/
          
          # 统计文件信息
          file_count=$(ls -1 release-files/ | wc -l)
          total_size=$(du -sh release-files/ | cut -f1)
          
          echo ""
          echo "📊 发布统计:"
          echo "  📁 文件数量: $file_count"
          echo "  💾 总大小: $total_size"
          
          # 分类统计
          windows_count=$(ls -1 release-files/*.exe 2>/dev/null | wc -l || echo 0)
          macos_count=$(ls -1 release-files/*.dmg 2>/dev/null | wc -l || echo 0)
          linux_count=$(ls -1 release-files/*.AppImage 2>/dev/null | wc -l || echo 0)
          
          echo "  🪟 Windows文件: $windows_count"
          echo "  🍎 macOS文件: $macos_count"
          echo "  🐧 Linux文件: $linux_count"
          
          if [ $file_count -eq 0 ]; then
            echo "❌ 没有找到可发布的文件"
            exit 1
          fi
      
      # 生成Release说明
      - name: 生成Release说明
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 My Awesome App v${{ steps.version.outputs.version }}
          
          ### 📦 支持平台
          
          **🪟 Windows (x64)**
          - NSIS安装程序 (推荐) - 双击安装，支持自动更新
          - 便携版本 - 绿色版，无需安装
          
          **🍎 macOS**
          - Intel Mac (x64) - 支持macOS 10.12+
          - Apple Silicon (ARM64) - 原生M系列芯片支持
          
          **🐧 Linux (x64)**
          - AppImage - 通用便携版本，适用于所有发行版
          - Debian/Ubuntu (.deb) - 系统包管理器安装
          - CentOS/Fedora (.rpm) - 系统包管理器安装
          
          ### 📝 安装指南
          
          **Windows:**
          1. 下载 `My-Awesome-App-*-win-x64.exe` (NSIS安装程序)
          2. 双击运行，按向导安装
          3. 如遇安全提示，点击"更多信息" → "仍要运行"
          
          **macOS:**
          1. 根据芯片类型下载对应的 `.dmg` 文件
          2. 双击挂载，拖拽应用到 Applications 文件夹
          3. 首次运行可能需要右键点击 → "打开"
          
          **Linux:**
          1. **AppImage (推荐)**: 下载后添加执行权限 `chmod +x *.AppImage`
          2. **Ubuntu/Debian**: `sudo dpkg -i *.deb`
          3. **CentOS/Fedora**: `sudo rpm -i *.rpm`
          
          ### 🔄 自动更新
          
          ✅ 应用内置自动更新功能  
          ✅ 安装后会自动检测新版本  
          ✅ 支持增量更新，节省下载时间  
          
          ### 🛠️ 技术信息
          
          - **Electron**: 28.3.3
          - **Node.js**: 18.x  
          - **构建平台**: GitHub Actions
          - **构建时间**: $(date)
          
          ### 🔍 文件校验
          
          所有文件都包含SHA校验值 (.blockmap文件)，确保下载完整性。
          
          ---
          
          **🔗 相关链接**
          - [📖 源代码](https://github.com/${{ github.repository }})
          - [🐛 问题反馈](https://github.com/${{ github.repository }}/issues)
          - [📝 更新日志](https://github.com/${{ github.repository }}/releases)
          - [📚 使用文档](https://github.com/${{ github.repository }}#readme)
          EOF
      
      # 创建Release
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "🎉 My Awesome App v${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: release-files/*
          make_latest: true
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 验证Release创建
      - name: 验证Release创建
        run: |
          echo "⏳ 等待Release完全创建..."
          sleep 15
          
          echo "=== 🔍 验证Release状态 ==="
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.tag }}")
          
          if echo "$response" | jq -e '.tag_name' > /dev/null; then
            echo "✅ Release创建成功"
            
            release_url=$(echo "$response" | jq -r '.html_url')
            assets_count=$(echo "$response" | jq '.assets | length')
            
            echo "🔗 Release URL: $release_url"
            echo "📦 包含文件: $assets_count 个"
            
            if [ $assets_count -gt 0 ]; then
              echo ""
              echo "📋 文件清单:"
              echo "$response" | jq -r '.assets[] | "  ✓ \(.name) (\((.size / 1024 / 1024 * 100 | floor) / 100)MB)"'
              
              # 检查关键文件
              echo ""
              echo "🔍 平台文件检查:"
              if echo "$response" | jq -e '.assets[] | select(.name | test("\\.exe$"))' > /dev/null; then
                echo "  ✅ Windows文件已包含"
              else
                echo "  ⚠️ 未找到Windows文件"
              fi
              
              if echo "$response" | jq -e '.assets[] | select(.name | test("\\.dmg$"))' > /dev/null; then
                echo "  ✅ macOS文件已包含"
              else
                echo "  ⚠️ 未找到macOS文件"
              fi
              
              if echo "$response" | jq -e '.assets[] | select(.name | test("\\.AppImage$"))' > /dev/null; then
                echo "  ✅ Linux文件已包含"
              else
                echo "  ⚠️ 未找到Linux文件"
              fi
              
            else
              echo "⚠️ Release创建成功但没有附加文件"
            fi
            
          else
            echo "❌ Release验证失败"
            echo "API响应: $response"
            exit 1
          fi
      
      # 发布成功通知
      - name: 🎉 发布成功通知
        run: |
          echo ""
          echo "🎉🎉🎉 发布完成! 🎉🎉🎉"
          echo ""
          echo "📊 发布摘要:"
          echo "  🏷️ 应用名称: My Awesome App"
          echo "  📋 版本号: ${{ steps.version.outputs.version }}"
          echo "  🔖 Git标签: ${{ steps.version.outputs.tag }}"
          echo "  📅 发布时间: $(date)"
          echo ""
          echo "🔗 用户下载地址:"
          echo "  https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
          echo ""
          echo "✨ 特性说明:"
          echo "  🪟 支持 Windows 10/11 (x64)"
          echo "  🍎 支持 macOS Intel & Apple Silicon"
          echo "  🐧 支持主流 Linux 发行版"
          echo "  🔄 内置自动更新功能"
          echo ""
          echo "📱 用户现在可以下载并安装最新版本!"

  # 清理工件
  cleanup:
    name: 清理临时文件
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 清理构建工件
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            Windows-v${{ github.run_number }}
            macOS-v${{ github.run_number }}
            Linux-v${{ github.run_number }}
        continue-on-error: true
      
      - name: 清理完成
        run: echo "🧹 临时文件清理完成"