name: 构建和发布

# 触发条件
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 1.0.1)'
        required: true
        default: '1.0.1'

# 权限设置
permissions:
  contents: write
  packages: write

jobs:
  build:
    name: 构建 ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            platform: win
          - os: macos-latest
            name: macOS
            platform: mac
          - os: ubuntu-latest
            name: Linux
            platform: linux
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 安装依赖
        run: npm ci
      
      # Windows特殊处理
      - name: Windows构建
        if: matrix.platform == 'win'
        shell: cmd
        run: |
          set CSC_IDENTITY_AUTO_DISCOVERY=false
          npm run publish:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # macOS构建
      - name: macOS构建
        if: matrix.platform == 'mac'
        run: npm run publish:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Linux构建
      - name: Linux构建
        if: matrix.platform == 'linux'
        run: npm run publish:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # 验证构建结果
      - name: 验证构建产物
        shell: bash
        run: |
          echo "=== 构建产物检查 ==="
          if [ -d "dist" ]; then
            ls -la dist/
            echo "构建成功，文件已生成"
          else
            echo "❌ 构建失败，dist目录不存在"
            exit 1
          fi
      
      # 上传构建产物
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.name }}-artifacts
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.deb
            dist/*.rpm
            dist/*.AppImage
            dist/*.yml
            dist/*.blockmap
          retention-days: 30
          if-no-files-found: warn

  # 仅在推送标签时创建Release
  create-release:
    name: 创建Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && needs.build.result == 'success'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 获取版本信息
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
      
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: 整理发布文件
        run: |
          mkdir -p release-files
          
          # 复制所有平台的文件到release-files目录
          find artifacts/ -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.yml" -o -name "*.blockmap" \) -exec cp {} release-files/ \;
          
          echo "=== 准备发布的文件 ==="
          ls -la release-files/
          
          echo "=== 文件大小统计 ==="
          du -h release-files/*
      
      - name: 生成Release说明
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 My Awesome App v${{ steps.version.outputs.version }}
          
          ### ✨ 新增功能
          - 新增功能和特性
          
          ### 🐛 问题修复
          - 修复已知问题
          
          ### 📦 下载指南
          
          **🪟 Windows用户:**
          - 安装程序版本: `My-Awesome-App-Setup-*.exe`
          - 便携版本: `My-Awesome-App-*-win-x64.exe`
          
          **🍎 macOS用户:**
          - Intel Mac: `My-Awesome-App-*-mac-x64.dmg`
          - Apple Silicon: `My-Awesome-App-*-mac-arm64.dmg`
          
          **🐧 Linux用户:**
          - 通用版本: `My-Awesome-App-*-x86_64.AppImage`
          - Ubuntu/Debian: `my-awesome-app_*_amd64.deb`
          - CentOS/Fedora: `my-awesome-app-*.x86_64.rpm`
          
          ### 🔄 自动更新
          应用支持自动更新，安装后会自动检测新版本。
          
          ---
          **完整更新日志:** [查看变更](https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.version }}...main)
          EOF
      
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "🎉 My Awesome App v${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: release-files/*
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 发布成功通知
        run: |
          echo "🎉 发布成功完成!"
          echo "版本: ${{ steps.version.outputs.version }}"
          echo "Release地址: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"

  # 清理工件
  cleanup:
    name: 清理工件
    needs: [build, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: 清理构建工件
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            Windows-artifacts
            macOS-artifacts
            Linux-artifacts
        continue-on-error: true