name: 构建和发布

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "发布版本号 (例如: 1.0.18)"
        required: true
        default: "1.0.18"
      environment:
        description: "构建环境 (PROD, DEV, SIT, DEMO)"
        required: false
        default: "PROD"
        type: choice
        options:
          - "PROD"
          - "DEV"
          - "SIT"
          - "DEMO"

permissions:
  contents: write

jobs:
  # 构建阶段 - 完全禁用自动发布
  build:
    name: 构建 ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            platform: win
          - os: macos-latest
            name: macOS
            platform: mac
          - os: ubuntu-latest
            name: Linux
            platform: linux

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          # 使用特定SHA避免标签信息
          ref: ${{ github.sha }}

      - name: 显示当前目录 (Build Job)
        run: |
          echo "➡️ Current directory (build job start):"
          pwd

      - name: 解析环境信息
        id: parse_env
        shell: bash
        run: |
          # 从git tag或手动输入解析环境
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            # 从标签解析环境 (支持忽略大小写)
            TAG_NAME="${{ github.ref }}"
            TAG_NAME=${TAG_NAME#refs/tags/}
            echo "📋 检测到标签: $TAG_NAME"
            
            # 提取环境后缀并转换为大写
            if [[ $TAG_NAME =~ -([a-zA-Z]+)$ ]]; then
              ENV_SUFFIX="${BASH_REMATCH[1]}"
              ENV_SUFFIX=$(echo "$ENV_SUFFIX" | tr '[:lower:]' '[:upper:]')
              echo "🎯 检测到环境后缀: $ENV_SUFFIX"
              
              case $ENV_SUFFIX in
                "DEV"|"DEVELOPMENT")
                  BUILD_ENV="DEV"
                  ;;
                "SIT"|"STAGING")
                  BUILD_ENV="SIT"
                  ;;
                "DEMO"|"DEMONSTRATION")
                  BUILD_ENV="DEMO"
                  ;;
                "PROD"|"PRODUCTION")
                  BUILD_ENV="PROD"
                  ;;
                *)
                  echo "⚠️ 未识别的环境后缀: $ENV_SUFFIX，默认使用 PROD"
                  BUILD_ENV="PROD"
                  ;;
              esac
            else
              echo "📦 无环境后缀，默认使用 PROD"
              BUILD_ENV="PROD"
            fi
          else
            # 手动触发时使用输入的环境
            BUILD_ENV="${{ github.event.inputs.environment || 'PROD' }}"
          fi

          echo "🚀 构建环境: $BUILD_ENV"
          echo "BUILD_ENVIRONMENT=$BUILD_ENV" >> $GITHUB_OUTPUT
          echo "BUILD_ENVIRONMENT=$BUILD_ENV" >> $GITHUB_ENV

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 安装依赖
        run: npm ci

      # macOS专用：修复DMG构建问题
      - name: 🍎 macOS DMG构建环境准备
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "🧹 准备macOS构建环境..."
          
          # 清理现有卷 - 简化版本
          echo "🔍 清理现有相关卷..."
          for vol in /Volumes/*"BMO"* /Volumes/*"My Awesome App"* /Volumes/*"Middle Office"*; do
            if [ -d "$vol" ]; then
              echo "📱 发现卷: $vol"
              # 尝试正常卸载
              diskutil unmount "$vol" 2>/dev/null || true
              # 尝试强制卸载 
              diskutil unmount force "$vol" 2>/dev/null || true
              # 尝试hdiutil分离
              hdiutil detach "$vol" -force -quiet 2>/dev/null || true
            fi
          done
          
          # 清理构建文件
          echo "🗑️ 清理旧构建文件..."
          rm -rf dist/ build/ *.dmg 2>/dev/null || true
          
          # 基本系统优化
          echo "⚙️ 基本系统优化..."
          sysctl -w kern.maxfiles=65536 2>/dev/null || true
          sysctl -w kern.maxfilesperproc=65536 2>/dev/null || true
          
          # 等待系统稳定
          echo "⏳ 等待系统稳定..."
          sleep 3
          
          echo "✅ macOS构建环境准备完成"

      # 编译 TypeScript 代码和准备文件
      - name: 编译和准备文件
        run: |
          echo "➡️ Current directory (before compile):"
          pwd
          npm run build

      # 验证编译结果
      - name: 验证编译结果
        shell: bash
        run: |
          echo "=== TypeScript 编译验证 ==="
          if [ -f "release/main.js" ]; then
            echo "✅ main.js 编译成功"
            ls -la release/
          else
            echo "❌ TypeScript 编译失败: main.js 不存在"
            exit 1
          fi

          if [ -f "release/index.html" ]; then
            echo "✅ index.html 复制成功"
          else
            echo "❌ 资源复制失败: index.html 不存在"
            exit 1
          fi

      # 彻底清理Git环境防止electron-builder检测标签
      - name: 清理Git标签环境
        shell: bash
        run: |
          echo "清理Git环境以防止electron-builder自动发布..."

          # 移除所有远程引用
          git remote remove origin || true

          # 删除所有标签
          git tag -l | xargs -r git tag -d

          # 重新初始化为普通仓库
          rm -rf .git/refs/remotes
          rm -rf .git/refs/tags

          # 验证清理结果
          echo "当前Git状态:"
          git status || echo "Git状态检查完成"
          git tag -l || echo "无标签"

          echo "✅ Git环境已清理，electron-builder不会检测到发布条件"

      # 生成构建配置
      - name: Generate electron-builder config
        run: |
          echo "➡️ Deleting old config file..."
          npx shx rm -f electron-builder.json
          echo "➡️ Generating new config for ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}..."
          npm run config:ts:${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}
          echo "✅ Config generated. Contents:"
          cat electron-builder.json

      # macOS构建后清理准备
      - name: 🍎 macOS构建后清理准备
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "🔧 设置构建后清理钩子..."
          
          # 创建简化清理脚本
          cat > cleanup-volumes.sh << 'EOF'
          #!/bin/bash
          
          echo "🧹 执行卷清理..."
          
          # 清理BMO相关卷 - 使用通配符简化
          for vol in /Volumes/*"BMO"* /Volumes/*"My Awesome App"* /Volumes/*"Middle Office"*; do
            if [ -d "$vol" ]; then
              echo "🔄 清理卷: $vol"
              # 先尝试正常卸载
              diskutil unmount "$vol" 2>/dev/null || true
              # 再尝试强制卸载
              diskutil unmount force "$vol" 2>/dev/null || true
              # 最后尝试hdiutil分离
              hdiutil detach "$vol" -force -quiet 2>/dev/null || true
            fi
          done
          
          # 终止可能的hdiutil进程
          pkill -f "hdiutil" 2>/dev/null || true
          
          echo "✅ 卷清理完成"
          EOF
          
          chmod +x cleanup-volumes.sh

      # 构建 - 修复版本
      - name: 🔨 构建 ${{ matrix.name }}
        shell: bash
        run: |
          echo "➡️ Current directory (before package):"
          pwd
          
          # macOS特殊处理
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "🍎 开始macOS构建..."
            
            # 构建前最后清理
            echo "🧹 构建前最后清理..."
            ./cleanup-volumes.sh
            
            echo "🔨 执行macOS构建..."
            # 使用简化的构建过程，避免复杂的错误处理
            if ! npm run build:${{ matrix.platform }}; then
              echo "⚠️ 首次构建失败，执行清理后重试..."
              ./cleanup-volumes.sh
              
              # 强制清理所有相关进程
              sudo pkill -f "hdiutil" 2>/dev/null || true
              sudo pkill -f "BMO" 2>/dev/null || true
              sudo pkill -f "Middle Office" 2>/dev/null || true
              
              # 等待系统稳定
              sleep 5
              echo "🔄 重试构建..."
              npm run build:${{ matrix.platform }}
            fi
            
          else
            # Windows和Linux正常构建
            echo "🔨 开始 ${{ matrix.name }} 构建..."
            npm run build:${{ matrix.platform }}
          fi
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_ENVIRONMENT: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}
          # 只设置内存限制，移除不支持的参数
          NODE_OPTIONS: --max-old-space-size=4096

      # macOS构建后强制清理
      - name: 🍎 macOS构建后强制清理
        if: matrix.os == 'macos-latest' && always()
        shell: bash
        run: |
          echo "🧹 执行构建后清理..."
          
          # 执行清理脚本
          if [ -f "./cleanup-volumes.sh" ]; then
            ./cleanup-volumes.sh
          fi
          
          # 简化的额外清理
          echo "🔄 额外清理措施..."
          
          # 终止相关进程
          pkill -f "hdiutil" 2>/dev/null || true
          pkill -f "BMO" 2>/dev/null || true
          pkill -f "Middle Office" 2>/dev/null || true
          pkill -f "My Awesome App" 2>/dev/null || true
          
          # 清理临时文件
          rm -f cleanup-volumes.sh
          
          echo "✅ macOS构建后清理完成"

      # 验证构建结果 - 使用目标环境
      - name: 验证构建结果
        shell: bash
        run: |
          echo "=== ${{ matrix.name }} 构建验证 (环境: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}) ==="

          # 只检查目标环境目录
          TARGET_ENV="${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}"
          BUILD_DIR="BMO-MO-APP-RELEASES/$TARGET_ENV"

          if [ -d "$BUILD_DIR" ]; then
            echo "📁 找到构建目录: $BUILD_DIR"
            
            # 查找构建文件
            BUILD_FILES=$(find "$BUILD_DIR" -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" 2>/dev/null || true)
            
            if [ -n "$BUILD_FILES" ]; then
              echo "✅ 找到构建文件:"
              echo "$BUILD_FILES" | while read -r file; do
                [ -n "$file" ] && ls -lh "$file"
              done
              
              FILE_COUNT=$(echo "$BUILD_FILES" | grep -c . || echo 0)
              echo "📊 构建统计: 找到 $FILE_COUNT 个构建文件"
              echo "✅ ${{ matrix.name }} 构建成功"
            else
              echo "❌ ${{ matrix.name }} 构建失败: 目录存在但未找到构建文件"
              
              # 显示目录内容帮助调试
              echo "🔍 调试信息 - 目录内容:"
              find "$BUILD_DIR" -type f | head -20
              exit 1
            fi
          else
            echo "❌ ${{ matrix.name }} 构建失败: 未找到目标环境目录 $BUILD_DIR"
            echo "当前目录结构:"
            find . -maxdepth 2 -type d | head -10
            exit 1
          fi

      # 上传构建产物 - 只上传目标环境
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}-v${{ github.run_number }}
          path: |
            BMO-MO-APP-RELEASES/${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}/*
          retention-days: 7
          compression-level: 6
          if-no-files-found: warn

  # 发布阶段
  release:
    name: 创建GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.result == 'success'
    timeout-minutes: 30

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 显示当前目录 (Release Job)
        run: |
          echo "➡️ Current directory (release job start):"
          pwd

      - name: 解析环境信息
        id: parse_env
        shell: bash
        run: |
          # 从git tag或手动输入解析环境
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            # 从标签解析环境 (支持忽略大小写)
            TAG_NAME="${{ github.ref }}"
            TAG_NAME=${TAG_NAME#refs/tags/}
            echo "📋 检测到标签: $TAG_NAME"
            
            # 提取环境后缀并转换为大写
            if [[ $TAG_NAME =~ -([a-zA-Z]+)$ ]]; then
              ENV_SUFFIX="${BASH_REMATCH[1]}"
              ENV_SUFFIX=$(echo "$ENV_SUFFIX" | tr '[:lower:]' '[:upper:]')
              echo "🎯 检测到环境后缀: $ENV_SUFFIX"
              
              case $ENV_SUFFIX in
                "DEV"|"DEVELOPMENT")
                  BUILD_ENV="DEV"
                  ;;
                "SIT"|"STAGING")
                  BUILD_ENV="SIT"
                  ;;
                "DEMO"|"DEMONSTRATION")
                  BUILD_ENV="DEMO"
                  ;;
                "PROD"|"PRODUCTION")
                  BUILD_ENV="PROD"
                  ;;
                *)
                  echo "⚠️ 未识别的环境后缀: $ENV_SUFFIX，默认使用 PROD"
                  BUILD_ENV="PROD"
                  ;;
              esac
            else
              echo "📦 无环境后缀，默认使用 PROD"
              BUILD_ENV="PROD"
            fi
          else
            # 手动触发时使用输入的环境
            BUILD_ENV="${{ github.event.inputs.environment || 'PROD' }}"
          fi

          echo "🚀 发布环境: $BUILD_ENV"
          echo "BUILD_ENVIRONMENT=$BUILD_ENV" >> $GITHUB_OUTPUT
          echo "BUILD_ENVIRONMENT=$BUILD_ENV" >> $GITHUB_ENV

      - name: 获取版本信息
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version || '1.0.18' }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "📋 发布版本: $VERSION"

      # 下载所有构建产物
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      # 整理发布文件
      - name: 整理发布文件
        run: |
          mkdir -p release-files

          echo "=== 📁 检查下载的构建产物 (环境: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}) ==="
          find artifacts/ -type f \( \
            -name "*.exe" -o \
            -name "*.dmg" -o \
            -name "*.zip" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.AppImage" -o \
            -name "*.yml" -o \
            -name "*.blockmap" \
          \) -exec ls -lh {} \;

          # 复制所有文件到release目录
          find artifacts/ -type f \( \
            -name "*.exe" -o \
            -name "*.dmg" -o \
            -name "*.zip" -o \
            -name "*.deb" -o \
            -name "*.rpm" -o \
            -name "*.AppImage" -o \
            -name "*.yml" -o \
            -name "*.blockmap" \
          \) -exec cp {} release-files/ \;

          echo ""
          echo "=== 准备发布的文件 ==="
          ls -lah release-files/

          # 统计文件信息
          file_count=$(ls -1 release-files/ | wc -l)
          total_size=$(du -sh release-files/ | cut -f1)

          echo ""
          echo "📊 发布统计:"
          echo "  📁 文件数量: $file_count"
          echo "  💾 总大小: $total_size"
          echo "  🎯 构建环境: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}"

          # 分类统计
          windows_count=$(ls -1 release-files/*.exe 2>/dev/null | wc -l || echo 0)
          macos_count=$(ls -1 release-files/*.dmg 2>/dev/null | wc -l || echo 0)
          linux_count=$(ls -1 release-files/*.AppImage 2>/dev/null | wc -l || echo 0)

          echo "  🪟 Windows文件: $windows_count"
          echo "  🍎 macOS文件: $macos_count"
          echo "  🐧 Linux文件: $linux_count"

          if [ $file_count -eq 0 ]; then
            echo "❌ 没有找到可发布的文件"
            exit 1
          fi

      # 生成Release说明
      - name: 生成Release说明
        run: |
          ENV_LABEL=""
          case "${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}" in
            "DEV")
              ENV_LABEL=" (开发版)"
              ;;
            "SIT")
              ENV_LABEL=" (测试版)"
              ;;
            "DEMO")
              ENV_LABEL=" (演示版)"
              ;;
            "PROD")
              ENV_LABEL=""
              ;;
          esac

          cat > release_notes.md << EOF
          ## 🚀 My Awesome App v${{ steps.version.outputs.version }}$ENV_LABEL

          > **构建环境**: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}  
          > **构建时间**: $(date)

          ### 📦 支持平台

          **🪟 Windows (x64)**
          - NSIS安装程序 (推荐) - 双击安装，支持自动更新
          - 便携版本 - 绿色版，无需安装

          **🍎 macOS**
          - Intel Mac (x64) - 支持macOS 10.15+
          - Apple Silicon (ARM64) - 原生M系列芯片支持

          **🐧 Linux (x64)**
          - AppImage - 通用便携版本，适用于所有发行版
          - Debian/Ubuntu (.deb) - 系统包管理器安装
          - CentOS/Fedora (.rpm) - 系统包管理器安装

          ### 📝 安装指南

          **Windows:**
          1. 下载 \`my-awesome-app-*-win-x64.exe\` (NSIS安装程序)
          2. 双击运行，按向导安装
          3. 如遇安全提示，点击"更多信息" → "仍要运行"

          **macOS:**
          1. 根据芯片类型下载对应的 \`.dmg\` 文件
          2. 双击挂载，拖拽应用到 Applications 文件夹
          3. 首次运行可能需要右键点击 → "打开"

          **Linux:**
          1. **AppImage (推荐)**: 下载后添加执行权限 \`chmod +x *.AppImage\`
          2. **Ubuntu/Debian**: \`sudo dpkg -i *.deb\`
          3. **CentOS/Fedora**: \`sudo rpm -i *.rpm\`

          ### 🔄 自动更新

          ✅ 应用内置自动更新功能  
          ✅ 安装后会自动检测新版本  
          ✅ 支持增量更新，节省下载时间  

          ### 🛠️ 技术信息

          - **Electron**: 28.2.4
          - **Node.js**: 20.x  
          - **构建平台**: GitHub Actions
          - **构建环境**: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}

          ### 📁 文件校验

          所有文件都包含SHA校验值 (.blockmap文件)，确保下载完整性。

          ---

          **🔗 相关链接**
          - [📖 源代码](https://github.com/${{ github.repository }})
          - [🐛 问题反馈](https://github.com/${{ github.repository }}/issues)
          - [📝 更新日志](https://github.com/${{ github.repository }}/releases)
          - [📚 使用文档](https://github.com/${{ github.repository }}#readme)
          EOF

      # 创建Release
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "🎉 My Awesome App v${{ steps.version.outputs.version }} [${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}]"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT != 'PROD' }}
          files: release-files/*
          make_latest: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT == 'PROD' }}
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 验证Release创建
      - name: 验证Release创建
        run: |
          echo "⏳ 等待Release完全创建..."
          sleep 15

          echo "=== 📁 验证Release状态 ==="
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.version.outputs.tag }}")

          if echo "$response" | jq -e '.tag_name' > /dev/null; then
            echo "✅ Release创建成功"
            
            release_url=$(echo "$response" | jq -r '.html_url')
            assets_count=$(echo "$response" | jq '.assets | length')
            is_prerelease=$(echo "$response" | jq -r '.prerelease')
            
            echo "🔗 Release URL: $release_url"
            echo "📦 包含文件: $assets_count 个"
            echo "🎯 构建环境: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}"
            echo "🏷️ 预发布版: $is_prerelease"
            
            if [ $assets_count -gt 0 ]; then
              echo ""
              echo "📋 文件清单:"
              echo "$response" | jq -r '.assets[] | "  ✓ \(.name) (\((.size / 1024 / 1024 * 100 | floor) / 100)MB)"'
              
              # 检查关键文件
              echo ""
              echo "🔍 平台文件检查:"
              if echo "$response" | jq -e '.assets[] | select(.name | test("\\.exe$"))' > /dev/null; then
                echo "  ✅ Windows文件已包含"
              else
                echo "  ⚠️ 未找到Windows文件"
              fi
              
              if echo "$response" | jq -e '.assets[] | select(.name | test("\\.dmg$"))' > /dev/null; then
                echo "  ✅ macOS文件已包含"
              else
                echo "  ⚠️ 未找到macOS文件"
              fi
              
              if echo "$response" | jq -e '.assets[] | select(.name | test("\\.AppImage$"))' > /dev/null; then
                echo "  ✅ Linux文件已包含"
              else
                echo "  ⚠️ 未找到Linux文件"
              fi
              
            else
              echo "⚠️ Release创建成功但没有附加文件"
            fi
            
          else
            echo "❌ Release验证失败"
            echo "API响应: $response"
            exit 1
          fi

      # 发布成功通知
      - name: 🎉 发布成功通知
        run: |
          echo ""
          echo "🎉🎉🎉 发布完成! 🎉🎉🎉"
          echo ""
          echo "📊 发布摘要:"
          echo "  🏷️ 应用名称: My Awesome App"
          echo "  📋 版本号: ${{ steps.version.outputs.version }}"
          echo "  📖 Git标签: ${{ steps.version.outputs.tag }}"
          echo "  🎯 构建环境: ${{ steps.parse_env.outputs.BUILD_ENVIRONMENT }}"
          echo "  📅 发布时间: $(date)"
          echo ""
          echo "🔗 用户下载地址:"
          echo "  https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
          echo ""
          echo "✨ 特性说明:"
          echo "  🪟 支持 Windows 10/11 (x64)"
          echo "  🍎 支持 macOS Intel & Apple Silicon"
          echo "  🐧 支持主流 Linux 发行版"
          echo "  🔄 内置自动更新功能"
          echo ""
          echo "📱 用户现在可以下载并安装最新版本!"

  # 清理工件
  cleanup:
    name: 清理临时文件
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 显示当前目录 (Cleanup Job)
        run: |
          echo "➡️ Current directory (cleanup job start):"
          pwd

      - name: 清理构建工件
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            Windows-*-v${{ github.run_number }}
            macOS-*-v${{ github.run_number }}
            Linux-*-v${{ github.run_number }}
        continue-on-error: true

      - name: 清理完成
        run: echo "🧹 临时文件清理完成"